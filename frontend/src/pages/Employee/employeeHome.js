import React, { useState, useEffect } from "react";
import { Button, Card, Col, Container, Form, Row, Modal } from "react-bootstrap";
import axios from "axios";
import EmployeeNavbar from "../../components/employeeNavbar";

const EmployeeHome = () => {
  // State for reservations
  const [reservations, setReservations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // State for payment modal
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [paymentAmount, setPaymentAmount] = useState("");
  const [validated, setValidated] = useState(false);
  const [paymentError, setPaymentError] = useState("");

  // Fetch reservations
  const fetchReservations = async () => {
    try {
      setLoading(true);
      // Get current employee NAS from localStorage
      const employeeData = JSON.parse(localStorage.getItem('userData'));
      const employeeId = employeeData?.nas_employe;
      
      if (!employeeId) {
        throw new Error("Données d'employé non trouvées. Veuillez vous reconnecter.");
      }
  
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/employee/${employeeId}/reservations`);
      
      if (response.data.success) {
        setReservations(response.data.reservations);
      } else {
        throw new Error(response.data.message || "Erreur lors de la récupération des réservations");
      }
    } catch (error) {
      console.error("Erreur lors de la récupération des réservations:", error);
      setError(error.message || "Une erreur est survenue lors du chargement des réservations");
    } finally {
      setLoading(false);
    }
  };

  // Initial data load
  useEffect(() => {
    fetchReservations();
  }, []);

  // Handle opening payment modal
  const openPaymentModal = (reservation) => {
    setSelectedReservation(reservation);
    setPaymentAmount(reservation.montant.toString());
    setPaymentError("");
    setShowPaymentModal(true);
  };

  // Handle payment amount change
  const handlePaymentAmountChange = (e) => {
    setPaymentAmount(e.target.value);
  };

  // Handle payment form submission
  const handlePaymentSubmit = async (event) => {
    event.preventDefault();
    const form = event.currentTarget;

    // Form validation
    if (form.checkValidity() === false) {
      event.stopPropagation();
      setValidated(true);
      return;
    }

    try {
      // Get current employee NAS from localStorage
      const employeeData = JSON.parse(localStorage.getItem('userData'));
      const employeeId = employeeData?.nas_employe;
      
      if (!employeeId) {
        throw new Error("Données d'employé non trouvées. Veuillez vous reconnecter.");
      }

      // Prepare data for API
      const locationData = {
        debut_date_location: selectedReservation.debut_date_reservation,
        fin_date_location: selectedReservation.fin_date_reservation,
        montant: parseFloat(paymentAmount),
        NAS_employe: employeeId,
        NAS_client: selectedReservation.nas_client,
        chambre_ID: selectedReservation.chambre_id,
        reservation_ID: selectedReservation.reservation_id
        // transaction_date will be generated by a trigger in the backend
      };

      // Send data to backend
      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/locations`, locationData);
      
      if (response.data.success) {
        // Refresh reservations list
        fetchReservations();
        setShowPaymentModal(false);
        alert("Paiement confirmé et réservation transformée en location !");
      } else {
        throw new Error(response.data.message || "Erreur lors de la création de la location");
      }

    } catch (err) {
      console.error("Error creating location:", err);
      setPaymentError(err.response?.data?.message || err.message || "Une erreur s'est produite lors du traitement");
    }

    setValidated(true);
  };

  // Handle direct reservation cancellation without modal
  const handleCancelReservation = async (reservationId) => {
    try {
      const response = await axios.delete(`${process.env.REACT_APP_API_URL}/api/reservations/${reservationId}`);
      
      if (response.data.success) {
        // Refresh reservations list
        fetchReservations();
        
        // Show success message
        alert("La réservation a été annulée avec succès !");
      } else {
        throw new Error(response.data.message || "Erreur lors de l'annulation de la réservation");
      }

    } catch (err) {
      console.error("Error cancelling reservation:", err);
      setError(err.response?.data?.message || err.message || "Une erreur s'est produite lors de l'annulation");
      alert("Erreur lors de l'annulation: " + (err.response?.data?.message || err.message || "Une erreur s'est produite"));
    }
  };

  return (
    <div>
      <EmployeeNavbar />
      <Container className="py-4">
        {/* Reservations Section */}
        <Row>
          <Col md={10} className="mx-auto">
            <h3 className="mb-4 text-primary">Liste des Réservations des Clients</h3>
            
            {loading ? (
              <div className="text-center py-5">
                <div className="spinner-border text-primary" role="status">
                  <span className="visually-hidden">Chargement...</span>
                </div>
                <p className="mt-3">Chargement des réservations...</p>
              </div>
            ) : error ? (
              <div className="alert alert-danger">{error}</div>
            ) : reservations.length > 0 ? (
              reservations.map((reservation) => (
                <Card key={reservation.reservation_id} className="mb-4 reservation-card">
                  <Card.Body>
                    <Row>
                      <Col md={8}>
                        <p className="mb-2">
                          <strong>Client:</strong> {reservation.prenom_client} {reservation.nom_client}
                        </p>
                        <p className="mb-2">
                          <strong>NAS Client:</strong> {reservation.nas_client}
                        </p>
                        <p className="mb-2">
                          <strong>Chambre ID:</strong> {reservation.chambre_id}
                        </p>
                        <p className="mb-2">
                          <strong>Dates:</strong> Du {new Date(reservation.debut_date_reservation).toLocaleDateString()} au {new Date(reservation.fin_date_reservation).toLocaleDateString()}
                        </p>
                        <p className="mb-2">
                          <strong>Montant:</strong> ${reservation.montant}
                        </p>
                      </Col>
                      <Col md={4} className="d-flex align-items-end justify-content-end">
                        <Button
                          variant="danger"
                          onClick={() => handleCancelReservation(reservation.reservation_id)}
                          className="me-3"
                        >
                          Annulez
                        </Button>
                        <Button
                          variant="primary"
                          onClick={() => openPaymentModal(reservation)}
                        >
                          Confirmez
                        </Button>
                      </Col>
                    </Row>
                  </Card.Body>
                </Card>
              ))
            ) : (
              <div className="text-center py-5">
                <h5>Il n'y a aucune réservation à confirmer.</h5>
              </div>
            )}
          </Col>
        </Row>
      </Container>

      {/* Payment Modal */}
      <Modal show={showPaymentModal} onHide={() => setShowPaymentModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Confirmer le Paiement</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {paymentError && <div className="alert alert-danger">{paymentError}</div>}

          <Form noValidate validated={validated} onSubmit={handlePaymentSubmit}>
            <Form.Group className="mb-3" controlId="validationPaymentAmount">
              <Form.Label>Montant</Form.Label>
              <Form.Control
                required
                type="number"
                placeholder="Entrez le montant"
                value={paymentAmount}
                onChange={handlePaymentAmountChange}
                min="0"
                step="0.01"
              />
              <Form.Control.Feedback type="invalid">
                Svp entrez un montant valide.
              </Form.Control.Feedback>
            </Form.Group>

            <div className="d-flex justify-content-end mt-4">
              <Button type="submit" variant="primary">
                Confirmer
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default EmployeeHome;